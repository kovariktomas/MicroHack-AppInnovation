name: Build and Deploy Lego Catalog (Multi-Revision)

on:
  push:
    branches: [ main ]
    paths:
      - 'dotnet/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write # required for OIDC federated credentials

env:
  CONTAINER_APP_NAME: lego-catalog-app
  IMAGE_NAME: lego-catalog/app

jobs:
  build_and_stage:
    name: Build & Stage (create new revision with 0% traffic)
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      image: ${{ steps.build.outputs.image }}
      imageTag: ${{ steps.meta.outputs.tag }}
      newRevision: ${{ steps.stage.outputs.newRevision }}
      oldRevision: ${{ steps.stage.outputs.oldRevision }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - id: meta
        name: Compute tag
        run: echo "tag=$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: ACR Login
        run: az acr login -n ${{ vars.ACR_NAME }}

      - id: build
        name: Build & Push Image
        run: |
          REGISTRY=${{ vars.ACR_NAME }}.azurecr.io
          TAG=${{ steps.meta.outputs.tag }}
          IMAGE="$REGISTRY/${{ env.IMAGE_NAME }}:$TAG"
          docker build -t "$IMAGE" -f dotnet/Dockerfile dotnet
          docker push "$IMAGE"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Show recent tags
        run: az acr repository show-tags -n ${{ vars.ACR_NAME }} --repository ${{ env.IMAGE_NAME }} --top 5 --orderby time_desc || true

      - id: stage
        name: Create new revision (0% traffic)
        run: |
          RG=${{ vars.RESOURCE_GROUP_NAME }}
          APP=${{ env.CONTAINER_APP_NAME }}
          TAG=${{ steps.meta.outputs.tag }}
          IMAGE=${{ steps.build.outputs.image }}
          # Capture currently active (expected single) revision
          OLD_REV=$(az containerapp revision list -n "$APP" -g "$RG" --query "[?active==\`true\`].name | [0]" -o tsv)
          echo "Old revision: $OLD_REV"
          # Update image -> creates new revision in Multiple mode
          az containerapp update -n "$APP" -g "$RG" --image "$IMAGE" --set-env-vars IMAGE_VERSION=$TAG
          # Identify newest revision (latest createdTime)
          NEW_REV=$(az containerapp revision list -n "$APP" -g "$RG" --query "sort_by([].{name:name, created:properties.createdTime}, &created)[-1].name" -o tsv)
          echo "New revision: $NEW_REV"
          # Set traffic: old gets 100, new gets 0
          if [ -n "$OLD_REV" ] && [ -n "$NEW_REV" ]; then
            az containerapp ingress traffic set -n "$APP" -g "$RG" --revision-weight $OLD_REV=100 $NEW_REV=0
          fi
          echo "newRevision=$NEW_REV" >> $GITHUB_OUTPUT
          echo "oldRevision=$OLD_REV" >> $GITHUB_OUTPUT

      - name: Output URL
        run: az containerapp show -n ${{ env.CONTAINER_APP_NAME }} -g ${{ vars.RESOURCE_GROUP_NAME }} --query properties.configuration.ingress.fqdn -o tsv

  promote_production:
    name: Promote to Production (100% traffic & deactivate old)
    runs-on: ubuntu-latest
    needs: build_and_stage
    environment: production
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Shift traffic & deactivate previous revisions
        run: |
          RG=${{ vars.RESOURCE_GROUP_NAME }}
          APP=${{ env.CONTAINER_APP_NAME }}
          NEW_REV=${{ needs.build_and_stage.outputs.newRevision }}
          az containerapp ingress traffic set -n "$APP" -g "$RG" --revision-weight $NEW_REV=100
          # Deactivate any other active revisions (safety if more than one existed)
          OTHER_REVS=$(az containerapp revision list -n "$APP" -g "$RG" --query "[?name!='${NEW_REV}'].name" -o tsv)
          for R in $OTHER_REVS; do
            echo "Deactivating old revision $R" || true
            az containerapp revision deactivate -n "$APP" -g "$RG" --revision "$R" || true
          done